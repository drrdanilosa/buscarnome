/**
 * üîß TESTE DE CONTEXTO E VALIDA√á√ÉO DA EXTENS√ÉO
 * Este script valida se a extens√£o est√° funcionando no contexto correto
 */

console.log('üöÄ INICIANDO VALIDA√á√ÉO COMPLETA DA EXTENS√ÉO...');
console.log('=====================================');

// Fun√ß√£o principal de valida√ß√£o
async function validarExtensaoCompleta() {
    const resultados = {
        contexto: false,
        apis: false,
        comunicacao: false,
        storage: false,
        detalhes: []
    };
    
    try {
        // 1. Verificar contexto
        console.log('üìç 1. Verificando contexto...');
        const url = window.location.href;
        const protocol = window.location.protocol;
        
        const contextoCorreto = protocol === 'moz-extension:' || protocol === 'chrome-extension:';
        resultados.contexto = contextoCorreto;
        
        if (contextoCorreto) {
            console.log('‚úÖ Contexto: CORRETO (' + protocol + ')');
            resultados.detalhes.push('‚úÖ Contexto privilegiado detectado');
        } else {
            console.error('‚ùå Contexto: INCORRETO (' + protocol + ')');
            resultados.detalhes.push('‚ùå Contexto n√£o privilegiado: ' + protocol);
            console.error('üí° SOLU√á√ÉO: Acesse via moz-extension:// ou chrome-extension://');
            return resultados;
        }
        
        // 2. Verificar APIs
        console.log('üìç 2. Verificando APIs do browser...');
        const browserAPI = typeof browser !== 'undefined' ? browser : (typeof chrome !== 'undefined' ? chrome : null);
        
        if (browserAPI) {
            console.log('‚úÖ APIs: DISPON√çVEIS');
            resultados.apis = true;
            resultados.detalhes.push('‚úÖ APIs do browser dispon√≠veis');
            
            // Verificar APIs espec√≠ficas
            const apis = {
                runtime: !!browserAPI.runtime,
                storage: !!browserAPI.storage,
                tabs: !!browserAPI.tabs
            };
            
            console.log('üìã APIs dispon√≠veis:', apis);
            resultados.detalhes.push(`üìã Runtime: ${apis.runtime ? '‚úÖ' : '‚ùå'}, Storage: ${apis.storage ? '‚úÖ' : '‚ùå'}, Tabs: ${apis.tabs ? '‚úÖ' : '‚ùå'}`);
        } else {
            console.error('‚ùå APIs: N√ÉO DISPON√çVEIS');
            resultados.detalhes.push('‚ùå APIs do browser n√£o dispon√≠veis');
            return resultados;
        }
        
        // 3. Teste de comunica√ß√£o
        console.log('üìç 3. Testando comunica√ß√£o com background...');
        try {
            const response = await browserAPI.runtime.sendMessage({ 
                type: 'ping', 
                timestamp: Date.now(),
                source: 'validation-test'
            });
            
            if (response && response.pong) {
                console.log('‚úÖ Comunica√ß√£o: FUNCIONANDO');
                console.log('üì® Resposta:', response);
                resultados.comunicacao = true;
                resultados.detalhes.push('‚úÖ Background script respondeu: ' + response.pong);
            } else {
                console.error('‚ùå Comunica√ß√£o: FALHOU (resposta inv√°lida)');
                resultados.detalhes.push('‚ùå Background script n√£o respondeu corretamente');
            }
        } catch (error) {
            console.error('‚ùå Comunica√ß√£o: FALHOU (' + error.message + ')');
            resultados.detalhes.push('‚ùå Erro na comunica√ß√£o: ' + error.message);
        }
        
        // 4. Teste de storage
        console.log('üìç 4. Testando storage...');
        try {
            // Tentar ler configura√ß√µes
            const settingsResponse = await browserAPI.runtime.sendMessage({ type: 'getSettings' });
            
            if (settingsResponse && settingsResponse.success) {
                console.log('‚úÖ Storage: FUNCIONANDO');
                console.log('üì¶ Configura√ß√µes carregadas:', Object.keys(settingsResponse.settings || {}).length);
                resultados.storage = true;
                resultados.detalhes.push('‚úÖ Storage funcionando com ' + Object.keys(settingsResponse.settings || {}).length + ' configura√ß√µes');
            } else {
                console.error('‚ùå Storage: FALHOU (n√£o conseguiu carregar configura√ß√µes)');
                resultados.detalhes.push('‚ùå Storage n√£o conseguiu carregar configura√ß√µes');
            }
        } catch (error) {
            console.error('‚ùå Storage: FALHOU (' + error.message + ')');
            resultados.detalhes.push('‚ùå Erro no storage: ' + error.message);
        }
        
    } catch (error) {
        console.error('‚ùå ERRO GERAL:', error);
        resultados.detalhes.push('‚ùå Erro geral: ' + error.message);
    }
    
    return resultados;
}

// Fun√ß√£o para exibir relat√≥rio
function exibirRelatorio(resultados) {
    console.log('\nüìä RELAT√ìRIO FINAL DE VALIDA√á√ÉO');
    console.log('=====================================');
    
    const score = [
        resultados.contexto,
        resultados.apis, 
        resultados.comunicacao,
        resultados.storage
    ].filter(Boolean).length;
    
    console.log(`üéØ SCORE: ${score}/4 (${Math.round(score/4*100)}%)`);
    console.log('');
    
    resultados.detalhes.forEach(detalhe => {
        console.log(detalhe);
    });
    
    console.log('');
    
    if (score === 4) {
        console.log('üéâ EXTENS√ÉO 100% FUNCIONAL!');
        console.log('‚úÖ Todos os sistemas operacionais');
        console.log('üöÄ Pronta para uso');
    } else if (score >= 2) {
        console.log('‚ö†Ô∏è EXTENS√ÉO PARCIALMENTE FUNCIONAL');
        console.log('üí° Alguns problemas detectados');
        console.log('üìã Consulte GUIA_CONTEXTO_CORRETO.md');
    } else {
        console.log('‚ùå EXTENS√ÉO COM PROBLEMAS GRAVES');
        console.log('üîß Verifica√ß√£o urgente necess√°ria');
        console.log('üìã Consulte GUIA_CONTEXTO_CORRETO.md');
    }
    
    return score;
}

// Executar valida√ß√£o automaticamente
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîÑ Aguardando carregamento da p√°gina...');
    
    // Aguardar um pouco para garantir que tudo carregou
    setTimeout(async () => {
        const resultados = await validarExtensaoCompleta();
        const score = exibirRelatorio(resultados);
        
        // Exibir na p√°gina se poss√≠vel
        try {
            const body = document.body || document.documentElement;
            const resultDiv = document.createElement('div');
            resultDiv.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: ${score === 4 ? '#4caf50' : score >= 2 ? '#ff9800' : '#f44336'};
                color: white;
                padding: 15px;
                border-radius: 8px;
                font-family: monospace;
                font-size: 14px;
                z-index: 10000;
                max-width: 300px;
                box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            `;
            
            resultDiv.innerHTML = `
                <strong>üîß Valida√ß√£o Extens√£o</strong><br>
                üìä Score: ${score}/4 (${Math.round(score/4*100)}%)<br>
                ${score === 4 ? 'üéâ 100% Funcional!' : score >= 2 ? '‚ö†Ô∏è Problemas detectados' : '‚ùå Verifica√ß√£o urgente'}
            `;
            
            body.appendChild(resultDiv);
            
            // Remover ap√≥s 10 segundos
            setTimeout(() => {
                if (resultDiv.parentNode) {
                    resultDiv.parentNode.removeChild(resultDiv);
                }
            }, 10000);
            
        } catch (error) {
            console.log('‚ÑπÔ∏è N√£o foi poss√≠vel exibir resultado na p√°gina:', error.message);
        }
        
    }, 1000);
});

// Tamb√©m disponibilizar fun√ß√£o global para execu√ß√£o manual
window.validarExtensao = validarExtensaoCompleta;
window.exibirRelatorio = exibirRelatorio;

console.log('‚úÖ Script de valida√ß√£o carregado');
console.log('üí° Execute: await validarExtensao() para testar manualmente');
